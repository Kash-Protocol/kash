syntax = "proto3";

option go_package = "github.com/Kash-Protocol/kashd/cmd/kashwallet/daemon/pb";
package kashwalletd;

service kashwalletd {
  rpc GetBalance (GetBalanceRequest) returns (GetBalanceResponse) {}
  rpc GetExternalSpendableUTXOs (GetExternalSpendableUTXOsRequest) returns (GetExternalSpendableUTXOsResponse) {}
  rpc CreateUnsignedTransactions (CreateUnsignedTransactionsRequest) returns (CreateUnsignedTransactionsResponse) {}
  rpc ShowAddresses (ShowAddressesRequest) returns (ShowAddressesResponse) {}
  rpc NewAddress (NewAddressRequest) returns (NewAddressResponse) {}
  rpc Shutdown (ShutdownRequest) returns (ShutdownResponse) {}
  rpc Broadcast (BroadcastRequest) returns (BroadcastResponse) {}
  // Since SendRequest contains a password - this command should only be used on a trusted or secure connection
  rpc Send(SendRequest) returns (SendResponse) {}
  // Since SignRequest contains a password - this command should only be used on a trusted or secure connection
  rpc Sign(SignRequest) returns (SignResponse) {}
}

message GetBalanceRequest {
}

message GetBalanceResponse {
  repeated AssetBalance assetBalances = 1;
}

message AssetBalance {
  AssetType assetType = 1;
  uint64 available = 2;
  uint64 pending = 3;
  repeated AddressBalances addressBalances = 4;
}

message AddressBalances {
  string address = 1;
  AssetType assetType = 2;
  uint64 available = 3;
  uint64 pending = 4;
}

enum AssetType {
  KSH = 0;
  KUSD = 1;
  KRV = 2;
  UNKNOWN = 3;
}

message CreateUnsignedTransactionsRequest {
  string address = 1;
  AssetType assetType = 2;
  uint64 amount = 3;
  repeated string from = 4;
  bool useExistingChangeAddress = 5;
  bool isSendAll = 6;
}

message CreateUnsignedTransactionsResponse {
  repeated bytes unsignedTransactions = 1;
}

message ShowAddressesRequest {
}

message ShowAddressesResponse {
  repeated string address = 1;
}

message NewAddressRequest {
}

message NewAddressResponse {
  string address = 1;
}

message BroadcastRequest {
  bool isDomain = 1;
  repeated bytes transactions = 2;
}

message BroadcastResponse {
  repeated string txIDs = 1;
}

message ShutdownRequest {
}

message ShutdownResponse {
}

message Outpoint {
  string transactionId = 1;
  uint32 index = 2;
}

message UtxosByAddressesEntry {
  string address = 1;
  Outpoint outpoint = 2;
  UtxoEntry utxoEntry = 3;
}

message ScriptPublicKey {
  uint32 version = 1;
  string scriptPublicKey = 2;
}

message UtxoEntry {
  uint64 amount = 1;
  ScriptPublicKey scriptPublicKey = 2;
  uint64 blockDaaScore = 3;
  bool isCoinbase = 4;
}

message GetExternalSpendableUTXOsRequest{
  string address = 1;
}

message GetExternalSpendableUTXOsResponse{
  repeated UtxosByAddressesEntry Entries = 1;
}
// Since SendRequest contains a password - this command should only be used on a trusted or secure connection
message SendRequest{
  string toAddress = 1;
  AssetType assetType = 2;
  uint64 amount = 3;
  string password = 4;
  repeated string from = 5;
  bool useExistingChangeAddress = 6;
  bool isSendAll = 7;
}

message SendResponse{
  repeated string txIDs = 1;
  repeated bytes signedTransactions = 2;
}

// Since SignRequest contains a password - this command should only be used on a trusted or secure connection
message SignRequest{
  repeated bytes unsignedTransactions = 1;
  string password = 2;
}

message SignResponse{
  repeated bytes signedTransactions = 1;
}
